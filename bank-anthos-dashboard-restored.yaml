# Bank of Anthos Fraud Detection Dashboard - Restored Version
# Clean implementation with proper Bank of Anthos styling and transaction display

apiVersion: apps/v1
kind: Deployment
metadata:
  name: bank-anthos-dashboard-restored
  namespace: fraud-detection
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bank-anthos-dashboard-restored
  template:
    metadata:
      labels:
        app: bank-anthos-dashboard-restored
    spec:
      containers:
        - name: dashboard
          image: python:3.11-slim
          ports:
            - containerPort: 5000
          env:
            - name: FRAUD_API_URL
              value: "http://fraud-api-integrated.fraud-detection.svc.cluster.local:8000"
            - name: BANK_OF_ANTHOS_URL
              value: "http://YOUR_BANK_OF_ANTHOS_URL"
          command: ["/bin/bash", "-c"]
          args:
            - |
              pip install flask requests
              mkdir -p /app/templates /app/static && cd /app

              # Create main Flask application
              cat > app.py << 'EOF'
              from flask import Flask, render_template, request, jsonify
              import requests
              import json
              from datetime import datetime
              import os
              import uuid

              app = Flask(__name__)

              FRAUD_API_URL = os.getenv('FRAUD_API_URL', 'http://fraud-api-integrated.fraud-detection.svc.cluster.local:8000')
              BANK_OF_ANTHOS_URL = os.getenv('BANK_OF_ANTHOS_URL', 'http://YOUR_BANK_OF_ANTHOS_URL')

              # In-memory storage for simulated transactions
              simulated_transactions = []

              def get_real_transactions():
                  """Fetch real transactions from fraud API"""
                  try:
                      response = requests.get(f'{FRAUD_API_URL}/transactions', timeout=5)
                      if response.status_code == 200:
                          data = response.json()
                          return data.get('transactions', [])
                  except Exception as e:
                      print(f"Error fetching transactions: {e}")
                  return []

              def get_fraud_alerts():
                  """Fetch fraud alerts from fraud API"""
                  try:
                      response = requests.get(f'{FRAUD_API_URL}/alerts', timeout=5)
                      if response.status_code == 200:
                          data = response.json()
                          return data.get('alerts', [])
                  except Exception as e:
                      print(f"Error fetching alerts: {e}")
                  return []

              @app.route('/')
              def dashboard():
                  real_transactions = get_real_transactions()
                  fraud_alerts = get_fraud_alerts()
                  
                  # Combine real and simulated transactions
                  all_transactions = real_transactions + simulated_transactions
                  all_transactions.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
                  
                  return render_template('dashboard.html', 
                                       transactions=all_transactions,
                                       alerts=fraud_alerts,
                                       bank_url=BANK_OF_ANTHOS_URL)

              @app.route('/api/simulate-transaction', methods=['POST'])
              def simulate_transaction():
                  try:
                      data = request.json
                      
                      # Create simulated transaction
                      transaction = {
                          'id': f'sim_{uuid.uuid4().hex[:8]}',
                          'timestamp': datetime.utcnow().isoformat(),
                          'from_account': data['from_account'],
                          'to_account': data['to_account'],
                          'amount': float(data['amount']),
                          'description': data.get('description', 'Simulated Transaction'),
                          'type': 'simulated',
                          'fraud_analysis': {
                              'fraud_score': 0.3,
                              'risk_level': 'LOW',
                              'explanation': f'Simulated transaction analysis: ${float(data["amount"]):.2f} transfer appears to be within normal parameters for testing purposes.',
                              'recommendation': 'APPROVE',
                              'ai_powered': False
                          }
                      }
                      
                      simulated_transactions.append(transaction)
                      
                      return jsonify({'success': True, 'transaction_id': transaction['id']})
                  except Exception as e:
                      return jsonify({'success': False, 'error': str(e)}), 500

              @app.route('/api/real-transactions')
              def api_real_transactions():
                  return jsonify(get_real_transactions())

              if __name__ == '__main__':
                  app.run(host='0.0.0.0', port=5000, debug=True)
              EOF

              # Create HTML template with Bank of Anthos styling
              cat > templates/dashboard.html << 'EOF'
              <!DOCTYPE html>
              <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Bank of Anthos - AI Fraud Detection</title>
                  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
                  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
                  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
                  <style>
                      body {
                          font-family: 'Roboto', sans-serif;
                          background-color: #f8f9fa;
                          margin: 0;
                          padding: 0;
                      }
                      .header {
                          background-color: #008A20;
                          color: white;
                          padding: 1rem 0;
                          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      }
                      .header h1 {
                          margin: 0;
                          font-weight: 500;
                      }
                      .card {
                          border: none;
                          border-radius: 8px;
                          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                          margin-bottom: 1.5rem;
                      }
                      .btn-primary {
                          background-color: #008A20;
                          border-color: #008A20;
                      }
                      .btn-primary:hover {
                          background-color: #006d1a;
                          border-color: #006d1a;
                      }
                      .transaction-table {
                          background: white;
                          border-radius: 8px;
                          overflow: hidden;
                      }
                      .table th {
                          background-color: #f8f9fa;
                          border-bottom: 2px solid #dee2e6;
                          font-weight: 500;
                      }
                      .amount-debit {
                          color: #dc3545;
                          font-weight: 500;
                      }
                      .amount-credit {
                          color: #28a745;
                          font-weight: 500;
                      }
                      .risk-low {
                          color: #28a745;
                          font-weight: 500;
                      }
                      .risk-medium {
                          color: #ffc107;
                          font-weight: 500;
                      }
                      .risk-high {
                          color: #dc3545;
                          font-weight: 500;
                      }
                      .filter-section {
                          background: white;
                          padding: 1rem;
                          border-radius: 8px;
                          margin-bottom: 1rem;
                          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      }
                      .status-indicator {
                          display: inline-block;
                          width: 8px;
                          height: 8px;
                          border-radius: 50%;
                          margin-right: 0.5rem;
                      }
                      .status-live {
                          background-color: #28a745;
                      }
                      .gemini-analysis {
                          background-color: #f8f9fa;
                          border-left: 4px solid #008A20;
                          padding: 1rem;
                          margin-top: 0.5rem;
                          border-radius: 0 4px 4px 0;
                      }
                  </style>
              </head>
              <body>
                  <!-- Header -->
                  <div class="header">
                      <div class="container">
                          <div class="row align-items-center">
                              <div class="col-md-8">
                                  <h1><span class="material-icons me-2">account_balance</span>Bank of Anthos</h1>
                                  <p class="mb-0">AI-Powered Fraud Detection System</p>
                              </div>
                              <div class="col-md-4 text-end">
                                  <span class="status-indicator status-live"></span>
                                  <span>Live Monitoring</span>
                                  <br>
                                  <small id="current-time"></small>
                              </div>
                          </div>
                      </div>
                  </div>

                  <div class="container mt-4">
                      <!-- Transaction Simulation -->
                      <div class="card">
                          <div class="card-header">
                              <h5><span class="material-icons me-2">science</span>Transaction Simulation</h5>
                          </div>
                          <div class="card-body">
                              <form id="simulationForm">
                                  <div class="row">
                                      <div class="col-md-3">
                                          <label class="form-label">From Account</label>
                                          <input type="text" class="form-control" id="fromAccount" value="1234567890" required>
                                      </div>
                                      <div class="col-md-3">
                                          <label class="form-label">To Account</label>
                                          <input type="text" class="form-control" id="toAccount" value="0987654321" required>
                                      </div>
                                      <div class="col-md-3">
                                          <label class="form-label">Amount ($)</label>
                                          <input type="number" class="form-control" id="amount" value="100.00" step="0.01" required>
                                      </div>
                                      <div class="col-md-3">
                                          <label class="form-label">&nbsp;</label>
                                          <button type="submit" class="btn btn-primary w-100">
                                              <span class="material-icons me-1">send</span>Simulate Transaction
                                          </button>
                                      </div>
                                  </div>
                              </form>
                          </div>
                      </div>

                      <!-- Filtering Section -->
                      <div class="filter-section">
                          <div class="row">
                              <div class="col-md-4">
                                  <label class="form-label">Filter by From Account</label>
                                  <input type="text" class="form-control" id="filterFromAccount" placeholder="e.g., 1234567890">
                              </div>
                              <div class="col-md-4">
                                  <label class="form-label">Filter by To Account</label>
                                  <input type="text" class="form-control" id="filterToAccount" placeholder="e.g., 0987654321">
                              </div>
                              <div class="col-md-4">
                                  <label class="form-label">&nbsp;</label>
                                  <div>
                                      <button class="btn btn-outline-primary me-2" onclick="clearFilters()">Clear Filters</button>
                                      <button class="btn btn-primary" onclick="location.reload()">
                                          <span class="material-icons me-1">refresh</span>Refresh
                                      </button>
                                  </div>
                              </div>
                          </div>
                      </div>

                      <!-- Transactions Table -->
                      <div class="card">
                          <div class="card-header d-flex justify-content-between align-items-center">
                              <h5><span class="material-icons me-2">list</span>Recent Transactions</h5>
                              <span class="badge bg-primary" id="transactionCount">{{ transactions|length }} transactions</span>
                          </div>
                          <div class="card-body p-0">
                              <div class="table-responsive">
                                  <table class="table table-hover mb-0">
                                      <thead>
                                          <tr>
                                              <th>Timestamp</th>
                                              <th>From Account</th>
                                              <th>To Account</th>
                                              <th>Amount</th>
                                              <th>Type</th>
                                              <th>Status</th>
                                              <th>Risk Level</th>
                                          </tr>
                                      </thead>
                                      <tbody id="transactionTableBody">
                                          {% for transaction in transactions %}
                                          <tr class="transaction-row" 
                                              data-from-account="{{ transaction.from_account }}" 
                                              data-to-account="{{ transaction.to_account }}">
                                              <td>{{ transaction.timestamp[:19].replace('T', ' ') }}</td>
                                              <td>{{ transaction.from_account }}</td>
                                              <td>{{ transaction.to_account }}</td>
                                              <td>
                                                  <span class="amount-debit">-${{ "%.2f"|format(transaction.amount) }}</span>
                                              </td>
                                              <td>
                                                  {% if transaction.get('type') == 'simulated' %}
                                                      <span class="badge bg-info">🧪 Simulated</span>
                                                  {% else %}
                                                      <span class="badge bg-success">🏦 Real Bank Transaction</span>
                                                  {% endif %}
                                              </td>
                                              <td><span class="badge bg-success">✅ Processed</span></td>
                                              <td>
                                                  {% if transaction.get('fraud_analysis') %}
                                                      {% set risk_level = transaction.fraud_analysis.risk_level %}
                                                      {% if risk_level == 'HIGH' %}
                                                          <span class="risk-high">🚫 High Risk</span>
                                                      {% elif risk_level == 'MEDIUM' %}
                                                          <span class="risk-medium">⚠️ Medium Risk</span>
                                                      {% else %}
                                                          <span class="risk-low">✅ Low Risk</span>
                                                      {% endif %}
                                                  {% else %}
                                                      <span class="text-muted">⏳ Processing</span>
                                                  {% endif %}
                                              </td>
                                          </tr>
                                          <tr class="transaction-row" 
                                              data-from-account="{{ transaction.from_account }}" 
                                              data-to-account="{{ transaction.to_account }}">
                                              <td colspan="7">
                                                  {% if transaction.get('fraud_analysis') %}
                                                      <div class="gemini-analysis">
                                                          <div class="d-flex align-items-start">
                                                              <span class="material-icons me-2" style="color: #008A20;">smart_toy</span>
                                                              <div>
                                                                  <strong style="color: #008A20;">
                                                                      {% if transaction.fraud_analysis.get('ai_powered', False) %}
                                                                          Gemini AI Analysis
                                                                      {% else %}
                                                                          Enhanced Fraud Analysis
                                                                      {% endif %}
                                                                  </strong>
                                                                  <p class="mb-0 mt-1">{{ transaction.fraud_analysis.get('explanation', 'Analysis in progress...') }}</p>
                                                                  <small class="text-muted">
                                                                      Score: {{ "%.2f"|format(transaction.fraud_analysis.get('fraud_score', 0)) }} |
                                                                      Recommendation: {{ transaction.fraud_analysis.get('recommendation', 'PENDING') }}
                                                                  </small>
                                                              </div>
                                                          </div>
                                                      </div>
                                                  {% else %}
                                                      <div class="gemini-analysis">
                                                          <div class="d-flex align-items-start">
                                                              <span class="material-icons me-2" style="color: #ffc107;">hourglass_empty</span>
                                                              <div>
                                                                  <strong style="color: #ffc107;">Processing Transaction</strong>
                                                                  <p class="mb-0 mt-1">Fraud analysis is being processed. Please refresh to see results.</p>
                                                                  <small class="text-muted">Status: Pending Analysis</small>
                                                              </div>
                                                          </div>
                                                      </div>
                                                  {% endif %}
                                              </td>
                                          </tr>
                                          {% endfor %}
                                      </tbody>
                                  </table>
                              </div>
                          </div>
                      </div>
                  </div>

                  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
                  <script>
                      // Update current time
                      function updateTime() {
                          document.getElementById('current-time').textContent = new Date().toLocaleTimeString();
                      }
                      updateTime();
                      setInterval(updateTime, 1000);

                      // Transaction simulation
                      document.getElementById('simulationForm').addEventListener('submit', async function(e) {
                          e.preventDefault();
                          
                          const submitBtn = e.target.querySelector('button[type="submit"]');
                          const originalText = submitBtn.innerHTML;
                          submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Processing...';
                          submitBtn.disabled = true;
                          
                          try {
                              const response = await fetch('/api/simulate-transaction', {
                                  method: 'POST',
                                  headers: {'Content-Type': 'application/json'},
                                  body: JSON.stringify({
                                      from_account: document.getElementById('fromAccount').value,
                                      to_account: document.getElementById('toAccount').value,
                                      amount: document.getElementById('amount').value
                                  })
                              });
                              
                              const result = await response.json();
                              
                              if (result.success) {
                                  alert('✅ Transaction simulated successfully!');
                                  setTimeout(() => location.reload(), 1000);
                              } else {
                                  alert('❌ Error: ' + result.error);
                              }
                          } catch (error) {
                              alert('❌ Network error: ' + error.message);
                          } finally {
                              submitBtn.innerHTML = originalText;
                              submitBtn.disabled = false;
                          }
                      });

                      // Account filtering
                      function filterTransactions() {
                          const fromFilter = document.getElementById('filterFromAccount').value.toLowerCase();
                          const toFilter = document.getElementById('filterToAccount').value.toLowerCase();
                          const rows = document.querySelectorAll('.transaction-row');
                          let visibleCount = 0;
                          
                          for (let i = 0; i < rows.length; i += 2) {
                              const row = rows[i];
                              const analysisRow = rows[i + 1];
                              const fromAccount = row.dataset.fromAccount.toLowerCase();
                              const toAccount = row.dataset.toAccount.toLowerCase();
                              
                              const matchesFrom = !fromFilter || fromAccount.includes(fromFilter);
                              const matchesToAccount = !toFilter || toAccount.includes(toFilter);
                              const shouldShow = matchesFrom && matchesToAccount;
                              
                              row.style.display = shouldShow ? '' : 'none';
                              if (analysisRow) analysisRow.style.display = shouldShow ? '' : 'none';
                              
                              if (shouldShow) visibleCount++;
                          }
                          
                          document.getElementById('transactionCount').textContent = visibleCount + ' transactions';
                      }

                      function clearFilters() {
                          document.getElementById('filterFromAccount').value = '';
                          document.getElementById('filterToAccount').value = '';
                          filterTransactions();
                      }

                      // Add event listeners for filtering
                      document.getElementById('filterFromAccount').addEventListener('input', filterTransactions);
                      document.getElementById('filterToAccount').addEventListener('input', filterTransactions);

                      // Auto-refresh every 30 seconds
                      setInterval(() => location.reload(), 30000);
                  </script>
              </body>
              </html>
              EOF

              python app.py
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "250m"
---
apiVersion: v1
kind: Service
metadata:
  name: bank-anthos-dashboard-restored
  namespace: fraud-detection
spec:
  type: LoadBalancer
  selector:
    app: bank-anthos-dashboard-restored
  ports:
    - name: http
      port: 5000
      targetPort: 5000
